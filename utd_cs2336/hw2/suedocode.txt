public class hw_4_19

    // prompt user for the first 9 digits of an ISBN as an integer

    // String temp_integer equal to return value of .nextLine()

    // if the String.length() is not equal to 9, exit program with the error message "Incorrect number of digits"

    // int checksum equal to 0

    // loop 9 times calling Integer.parseInt() on each character from the temp_integer string

    // do checksum is equal to the checksum modulus 11

    // if checksum is equal to 10 concatenate "X" to temp_integer and display it to the console
    
    // else make checksum a new String, concatenate it to temp_integer, and display it to the console 


public class hw_5_22

    // double loan_amount equal 0
    // int number_of_years equal 0
    // double annual_rate equal 0

    // ask user for loan amount, number of years on the loan, and the annual rate

    // This interest rate will take into account the annual to monthly rate conversion
    // monthly payment formula M = (P * r/12 * Math.pow(1 + r/12, 12*t)) / (Math.pow(1 + r/12, 12*t) - 1)

    // use equation above to calculate the monthly payments 

    // display a header for the table of values generated when iterating, balance, principle, interest and payment #

    // iterate number_of_years * 12 times 
    // displaying the payment cycle number 
    // calculating and displaying the new principle based on the interest deduction 
    // and the overall balance per payment cycle 

    // if the last payment is greater than 0, add it to the final payment cycle expense
    // making the balance 0 after the final payment

public class hw_6_31

    // define the following methods

    /** Return true if the card number is valid */
    public static boolean isValid(long number)

        // int sum equal to 0

        // Using sumOfDoubleEvenPlace calculate the second step of the luhn's algorithm, adding to "sum"

        // Using the sumOfOddPlace method to calculate the odd place values and add it to "sum"

        // return "sum" is divisible by 10 doing the modulus of "sum" and 10 equal to 0

    /** Get the result from Step 2 */
    public static int sumOfDoubleEvenPlace(long number)

        // int temp equal to 0

        // for loop through number starting at int i equals 1, if i is less than getSize(number), for i + 2
        // incrementing across the number's even positions

        // in the loop extract, create int x equal to getPrefix(number, getSize(number) - i) modulus 10, this extracts the current digit 

        // replace x with getDigit(x)

        // sum up each digit into temp

        // after the loop return temp

    /** Return this number if it is a single digit, otherwise,
    * return the sum of the two digits */
    public static int getDigit(int number)

        // int doubled equals number * 2

        // if doubled is less than 9 return doubled

        // return (doubled / 10) + (doubled % 10)

    /** Return sum of odd-place digits in number */
    public static int sumOfOddPlace(long number)

        // int temp equal to 0

        // for loop through number, using int i equal to 0, if i is less than getSize(number), incrementing by i + 2
        // this catches all odd values 

        // within the loop, create int x equal to getPrefix(number, getSize(number) - i) modulus 10, this extracts the current digit
        
        // sum the int x into int temp 

        // after the loop ends, return int x 

    /** Return true if the digit d is a prefix for number */
    public static boolean prefixMatched(long number, int d)

        // int temp equal to Math.pow(10, getSize(number) - 1) to create a value as large as the card number

        // temp equal to number / temp to extract the last digit and truncate the rest of the number

        // return temp is equal to int d

    /** Return the number of digits in d */
    public static int getSize(long d)

        // int counter equal to 0

        // do a while loop with the condition that number / 10 is not equal to 0

        // within the loop, iteratively increment the counter by 1 and do number /= 10 to continue 
        // to push the number down until its only 1 digit left, which should end the while loop

        // return counter + 1, adding the last digit that was not counted

    /** Return the first k number of digits from number. If the
    * number of digits in number is less than k, return number. */
    public static long getPrefix(long number, int k)

        // int temp equal to getSize(number) - k to get the complementary value of the expected digits
        // which are the digits to remove from number from right to left 

        // if temp is less than or equal to 0 return number 

        // do for loop starting with int i equal to 0, if i is less than temp, incrementing by 1

        // in the loop, do number /= 10, temp number of times as each division removes 1 digit
        
        // after the loop ends return number

    // prompt the user for a card number between 13 and 16 digits (usually 16 digits)

    // display if the card number is valid or not to the user